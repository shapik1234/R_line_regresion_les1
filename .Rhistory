source("Functions.R")
#
require("corrplot")
require("doBy")
require("car")
require(car)
libPath()
.libPath()
libPaths()
lib.loc
lib.loc()
.libPaths( c( .libPaths(), "~/userLibrary") )
require(car)
install.packages(Rcpp)
"
install.packages("Rcpp")
install.packages("Rcpp")
require(car)
require(stats)
require(datasets)
require(ggplot2)
require(nortest)
require(car)
require(corrplot)
require(readxl)
require(MASS)
require(lmtest)
install.packages("zoo")
require(lmtest)
set.seed(1)
n
n
n <- runif(n)
n <- runif(n)
n = 100
x <- runif(n)
yl <- x+ rnorm(n, sd=.1)
?rnorm
fit1 <- lm(y1 ~ x)
#plotnost
yl <- x + rnorm(n, sd=.1)
fit1 <- lm(y1 ~ x)
#plotnost
y1 <- x + rnorm(n, sd=.1)
fit1 <- lm(y1 ~ x)
par(mfrow=c(1,2))
plot(x,y1,pch = 21, col = "black", bg = "lightblue", cex = .9)
? plot
plot(x,y1,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit1)
plot(x,resid(fit1),pch = 20, col = "black", bg = "lightblue", cex = .9)
abline(fit1)
abline(h=0)
par(mfrow=c(1,2))
plot(x,y1,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit1)
plot(x,resid(fit1),pch = 20, col = "black", bg = "lightblue", cex = .9)
abline(h=0)
View(fit1)
View(x)
View(y1)
full.pack <- c(x,y1)
View(full.pack)
full.pack <- cbind(x,y1)
View(full.pack)
full.pack <- rbind(x,y1)
View(full.pack)
fit2 <- lm(y2 ~ x)
plot(x,y2,pch = 21, col = "black", bg = "lightblue", cex = .9)
plot(x,y2,pch = 21, col = "black", bg = "lightblue", cex = .9)
#остатки расспределены равномерно что говорит о правильной модели
# тепрь пример не правильной модели
y2 <- log(x+1) + rnorm(n, sd=.1)
full.pack2 <- rbind(x,y2)
fit2 <- lm(y2 ~ x)
plot(x,y2,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit1)
abline(fit2)
plot(x,resid(fit2),pch = 20, col = "black", bg = "lightblue", cex = .9)
abline(h=0)
#остатки расспределены равномерно что говорит о правильной модели
# тепрь пример не правильной модели
y2 <- log(x) + rnorm(n, sd=.1)
full.pack2 <- rbind(x,y2)
fit2 <- lm(y2 ~ x)
plot(x,y2,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit2)
plot(x,resid(fit2),pch = 20, col = "black", bg = "lightblue", cex = .9)
abline(h=0)
# вывод по самой модели - можно сказать что она линейна
#но смотря на остатки - вывод 1  - они имеют зависимость (паттерн) модель не верна
y3 <- x + rnorm(n, sd=.001)
full.pack3 <- rbind(x,y3)
fit3 <- lm(y3 ~ x)
plot(x,y3,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit2)
abline(fit3)
plot(x,resid(fit3),pch = 20, col = "black", bg = "lightblue", cex = .9)
abline(h=0)
# вывод по самой модели - можно сказать что она линейна
#но смотря на остатки - вывод 1  - они имеют зависимость (паттерн) модель не верна
y3 <- x + rnorm(n, sd=.001*x)
full.pack3 <- rbind(x,y3)
fit3 <- lm(y3 ~ x)
plot(x,y3,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit3)
plot(x,resid(fit3),pch = 20, col = "black", bg = "lightblue", cex = .9)
abline(h=0)
y1 <- x + rnorm(n, sd=.1)
full.pack <- rbind(x,y1)
fit1 <- lm(y1 ~ x)
#display |_|_| two column for graphics
par(mfrow=c(1,2))
plot(x,y1,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit1)
plot(x,resid(fit1),pch = 20, col = "black", bg = "lightblue", cex = .9)
abline(h=0)
#остатки расспределены равномерно что говорит о правильной модели
# тепрь пример не правильной модели
#pr2
y2 <- log(x) + rnorm(n, sd=.1)
full.pack2 <- rbind(x,y2)
fit2 <- lm(y2 ~ x)
plot(x,y2,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit2)
plot(x,resid(fit2),pch = 20, col = "black", bg = "lightblue", cex = .9)
abline(h=0)
qqnorm(resid(fit1))
qqline(resid(fit1))
qqnorm(resid(fit2))
qqline(resid(fit2))
qqnorm(resid(fit1))
qqline(resid(fit1))
qqnorm(resid(fit2))
qqline(resid(fit2))
#
#
ggQQ = function(lm) {
# extract standardized residuals from the fit
d <- data.frame(std.resid = rstandard(lm))
# calculate 1Q/4Q line
y <- quantile(d$std.resid[!is.na(d$std.resid)], c(0.25, 0.75))
x <- qnorm(c(0.25, 0.75))
slope <- diff(y)/diff(x)
int <- y[1L] - slope * x[1L]
p <- ggplot(data=d, aes(sample=std.resid)) +
stat_qq(shape=1, size=3) +           # open circles
labs(title="Normal Q-Q",             # plot title
x="Theoretical Quantiles",      # x-axis label
y="Standardized Residuals") +   # y-axis label
geom_abline(slope = slope, intercept = int, linetype="dashed")  # dashed reference line
return(p)
}
#
#
ggQQ(fit1)
# зависимость стандартных квантилей остатков и текущих двет нам функции
#qqnorm(resid(fit1))
#qqline(resid(fit1)) - они должны сходиться
# ggQQ - своя функция отрисовки зависимости этих квантелей через пп==ггплот
#
ggQQ(fit1)
ggQQ(fit2)
#############
#############
#работа с выбросами
#############
#############
y4 <- c(9, x)
full.pack4 <- rbind(x,y4)
#############
#############
#работа с выбросами
#############
#############
x4 <- c(9, x) # добавили выброс
#############
#############
#работа с выбросами
#############
#############
x4 <- c(9, x) # добавили выброс
y4 <- c(3, x + rnorm(n, sd=.1))
full.pack4 <- rbind(x4,y4)
fit4 <- lm(y4 ~ x4)
View(full.pack4)
par(mfrow = c(1,1))
plot(x4,y4,pch = 21, col = "black", bg = "lightblue", cex = .9)
abline(fit4)
abline(h=0)
# имеем выброс который может исказить результаты
round(dfbetas(fit4), 3)
# имеем выброс который может исказить результаты
round(dfbetas(fit4), 3)
round(hatvalues(fit4),3)
